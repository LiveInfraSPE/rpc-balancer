package codegen

const RpcclientPkg = "github.com/ethereum/go-ethereum/rpc"

const RpcClientWrapperTemplate = `// Code generated by go generate; DO NOT EDIT.
package ethclient

import (
	"context"
	"fmt"

	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/rpc"
)

{{range .Methods}}
func (rp *Client) {{.Name}}({{.Params}}) ({{.Results}}) {

	{{if gt .NonErrorResultCount 0}}
	results, err := rp.retry(func(ethclient *ethclient.Client) ([]interface{}, error) {
	{{else}}
	_, err := rp.retry(func(ethclient *ethclient.Client) ([]interface{}, error) {
	{{end}}
		client := ethclient.Client()
		{{if .HasReturn}}
		{{.ReturnValues}} := client.{{.Name}}({{.CallParams}})
		{{if .HasError}}
		return []interface{}{ {{.ReturnValues}} }, {{.ErrorValue}}
		{{else}}
		return []interface{}{ {{.ReturnValues}} }, nil
		{{end}}
		{{else}}
		client.{{.Name}}({{.CallParams}})
		return nil, nil
		{{end}}
	}, {{.ResultCount}})
	if err != nil {
		{{if .HasError}}
			{{if gt .NonErrorResultCount 0}}
			return {{.ZeroResultsNonError}}, err
			{{else}}
			return err
			{{end}}
		{{else}}
			{{if gt .NonErrorResultCount 0}}
			return {{.ZeroResults}}
			{{else}}
			return
			{{end}}
		{{end}}
	}
	{{if .HasReturn}}
	{{if gt .ResultAssignmentsCount 0}}
	var ok bool
	{{end}}
	{{range $i, $assignment := .ResultAssignments}}
	{{$assignment}}
	{{end}}
		{{if .HasError}}
			{{if gt .NonErrorResultCount 0}}
			return {{.NonErrorReturnValues}}, nil
			{{else}}
			return nil
			{{end}}
		{{else}}
			{{if gt .NonErrorResultCount 0}}
			return {{.NonErrorReturnValues}}
			{{else}}
			return
			{{end}}
		{{end}}
	{{else}}
	return
	{{end}}
}
{{end}}
`
